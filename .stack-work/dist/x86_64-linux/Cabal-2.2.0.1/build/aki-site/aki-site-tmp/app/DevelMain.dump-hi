
==================== FINAL INTERFACE ====================
2018-12-30 14:28:36.245039712 UTC

interface main:DevelMain 8044
  interface hash: 91eab39a45110d716f59a11c7c0b73cd
  ABI hash: 60ac164586f6972d95d2726e68ad72f1
  export-list hash: 92ea1b42c095795093bfcc87fb66211e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 57040b68754083e16ab7df1e0a94735a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  DevelMain.modifyStoredIORef
  DevelMain.shutdown
  DevelMain.tidStoreNum
  DevelMain.update
module dependencies:
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.3.1.1 aeson-compat-0.3.9 aki-site-0.0.0 ansi-terminal-0.8.2
                      appar-0.1.7 array-0.5.2.0 asn1-encoding-0.9.5 asn1-parse-0.9.4
                      asn1-types-0.3.2 async-2.2.1 attoparsec-0.13.2.2
                      attoparsec-iso8601-1.0.1.0 authenticate-1.3.4 auto-update-0.1.4
                      base-4.11.1.0 base-compat-0.10.5 base-orphans-0.7
                      base64-bytestring-1.0.0.2 basement-0.0.8 basic-prelude-0.7.0
                      bifunctors-5.5.3 binary-0.8.5.1 blaze-builder-0.4.1.0
                      blaze-html-0.9.1.1 blaze-markup-0.8.2.2 bsb-http-chunked-0.0.0.4
                      byteable-0.1.1 byteorder-1.0.4 bytestring-0.10.8.2
                      case-insensitive-1.2.0.11 cereal-0.5.7.0 chunked-data-0.3.1
                      cipher-aes-0.2.11 classy-prelude-1.4.0 classy-prelude-conduit-1.4.0
                      classy-prelude-yesod-1.4.0 clientsession-0.9.1.2 colour-2.3.4
                      comonad-5.0.4 conduit-1.3.1 conduit-extra-1.3.0 connection-0.2.8
                      containers-0.5.11.0 contravariant-1.4.1 cookie-0.4.4
                      cprng-aes-0.6.1 crypto-api-0.13.3 crypto-cipher-types-0.0.9
                      crypto-random-0.0.9 cryptonite-0.25 cryptonite-conduit-0.2.2
                      css-text-0.1.3.0 data-default-0.7.1.1 data-default-class-0.1.2.0
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.4.3.0
                      directory-1.3.1.5 distributive-0.5.3 dlist-0.8.0.5
                      dlist-instances-0.1.1.1 easy-file-0.2.2 email-validate-2.3.2.9
                      entropy-0.4.1.4 exceptions-0.10.0 fast-logger-2.4.11
                      file-embed-0.0.10.1 filepath-1.4.2 foreign-store-0.2 free-5.0.2
                      ghc-boot-th-8.4.4 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      haskell-src-exts-1.20.3 haskell-src-meta-0.8.0.3 hjsmin-0.2.0.2
                      hourglass-0.2.12 http-api-data-0.3.8.1 http-client-0.5.14
                      http-client-tls-0.3.5.3 http-conduit-2.3.2 http-date-0.0.8
                      http-types-0.12.2 http2-1.6.4 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 iproute-1.7.7 kan-extensions-5.2
                      keys-3.12.1 language-javascript-0.6.0.11 lifted-base-0.2.3.12
                      memory-0.14.18 microlens-0.4.9.1 microlens-th-0.4.2.3
                      mime-types-0.1.0.8 monad-control-1.0.2.3 monad-logger-0.3.30
                      monad-loops-0.4.3 mono-traversable-1.0.10.0
                      mono-traversable-instances-0.1.0.0 mtl-2.2.2
                      mutable-containers-0.3.4 network-2.6.3.6 network-byte-order-0.0.0.0
                      network-uri-2.6.1.0 old-locale-1.0.0.7 old-time-1.1.0.3
                      parsec-3.1.13.0 path-pieces-0.2.1 pem-0.2.4 persistent-2.8.2
                      persistent-sqlite-2.8.2 persistent-template-2.5.4 pointed-5.0.1
                      pretty-1.1.3.6 primitive-0.6.3.0 process-1.6.3.0 profunctors-5.2.2
                      psqueues-0.2.7.0 random-1.1 resource-pool-0.2.3.2 resourcet-1.2.2
                      say-0.1.0.1 scientific-0.3.6.2 securemem-0.1.10 semigroupoids-5.2.2
                      shakespeare-2.0.20 silently-1.2.5 simple-sendfile-0.2.27
                      skein-1.0.9.4 socks-0.5.6 split-0.2.3.3 stm-2.4.5.1
                      stm-chans-3.0.0.4 streaming-commons-0.2.1.0 tagged-0.8.5
                      tagsoup-0.14.7 tagstream-conduit-0.5.5.3 template-haskell-2.13.0.0
                      text-1.2.3.1 th-abstraction-0.2.10.0 time-1.8.0.2
                      time-locale-compat-0.1.1.5 tls-1.4.1 transformers-0.5.5.0
                      transformers-base-0.4.5.2 transformers-compat-0.6.2 unix-2.7.2.2
                      unix-compat-0.5.1 unix-time-0.3.8 unliftio-0.2.9.0
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vault-0.3.1.2 vector-0.12.0.2
                      vector-algorithms-0.7.0.4 vector-instances-3.4 wai-3.2.1.2
                      wai-app-static-3.1.6.2 wai-extra-3.0.24.3 wai-logger-2.3.2
                      warp-3.2.25 word8-0.1.3 x509-1.7.5 x509-store-1.6.7
                      x509-system-1.6.6 x509-validation-1.6.11 xml-conduit-1.8.0.1
                      xml-types-0.3.6 xss-sanitize-0.3.6 yaml-0.8.32 yesod-1.6.0
                      yesod-auth-1.6.5 yesod-core-1.6.9 yesod-form-1.6.3
                      yesod-newsfeed-1.6.1.0 yesod-persistent-1.6.0.1
                      yesod-static-1.6.0.1 zlib-0.6.2
orphans: aki-site-0.0.0:Application
         mono-traversable-instances-0.1.0.0:Data.MonoTraversable.Instances
         vector-instances-3.4:Data.Vector.Instances
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         yesod-auth-1.6.5:Yesod.Auth
         http-client-0.5.14:Network.HTTP.Client.Request
         persistent-template-2.5.4:Database.Persist.TH
         aeson-compat-0.3.9:Data.Aeson.Compat
         haskell-src-exts-1.20.3:Language.Haskell.Exts.Parser
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistUnique
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
         colour-2.3.4:Data.Colour crypto-api-0.13.3:Crypto.Classes
         basement-0.0.8:Basement.UArray.Base basement-0.0.8:Basement.Block
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         vector-0.12.0.2:Data.Vector.Unboxed
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         unix-time-0.3.8:Data.UnixTime.Diff stm-2.4.5.1:Control.Monad.STM
         network-2.6.3.6:Network.Socket time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         transformers-0.5.5.0:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.3.1.1:Data.Aeson.Types.Internal aki-site-0.0.0:Foundation
                         aki-site-0.0.0:Model
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         basement-0.0.8:Basement.Block.Base basement-0.0.8:Basement.Monad
                         basement-0.0.8:Basement.MutableBuilder basement-0.0.8:Basement.Nat
                         basement-0.0.8:Basement.NonEmpty
                         basement-0.0.8:Basement.Numerical.Subtractive
                         basement-0.0.8:Basement.PrimType basement-0.0.8:Basement.String
                         basement-0.0.8:Basement.String.Encoding.ASCII7
                         basement-0.0.8:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.8:Basement.String.Encoding.UTF16
                         basement-0.0.8:Basement.String.Encoding.UTF32
                         basement-0.0.8:Basement.Types.OffsetSize
                         basement-0.0.8:Basement.UArray.Base
                         basement-0.0.8:Basement.UTF8.Base
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped
                         conduit-1.3.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         cryptonite-0.25:Crypto.ECC cryptonite-0.25:Crypto.Error.Types
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool dlist-0.8.0.5:Data.DList
                         email-validate-2.3.2.9:Text.Email.Parser
                         free-5.0.2:Control.Comonad.Cofree free-5.0.2:Control.Monad.Free
                         free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         haskell-src-exts-1.20.3:Language.Haskell.Exts.SrcLoc
                         haskell-src-exts-1.20.3:Language.Haskell.Exts.Syntax
                         http-client-0.5.14:Network.HTTP.Client iproute-1.7.7:Data.IP.Addr
                         iproute-1.7.7:Data.IP.Range kan-extensions-5.2:Data.Functor.Day
                         keys-3.12.1:Data.Key microlens-0.4.9.1:Lens.Micro.Internal
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.30:Control.Monad.Logger
                         mono-traversable-1.0.10.0:Data.Containers
                         mono-traversable-1.0.10.0:Data.MonoTraversable
                         mono-traversable-1.0.10.0:Data.NonNull
                         mono-traversable-1.0.10.0:Data.Sequences
                         mono-traversable-instances-0.1.0.0:Data.MonoTraversable.Instances
                         mutable-containers-0.3.4:Data.Mutable.BRef
                         mutable-containers-0.3.4:Data.Mutable.Class
                         mutable-containers-0.3.4:Data.Mutable.DLList
                         mutable-containers-0.3.4:Data.Mutable.Deque
                         mutable-containers-0.3.4:Data.Mutable.PRef
                         mutable-containers-0.3.4:Data.Mutable.SRef
                         mutable-containers-0.3.4:Data.Mutable.URef
                         network-uri-2.6.1.0:Network.URI
                         persistent-2.8.2:Database.Persist.Class.PersistConfig
                         persistent-2.8.2:Database.Persist.Class.PersistEntity
                         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.8.2:Database.Persist.Sql.Types.Internal
                         persistent-sqlite-2.8.2:Database.Persist.Sqlite
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         shakespeare-2.0.20:Text.Internal.Css
                         shakespeare-2.0.20:Text.Shakespeare tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.10.0:Language.Haskell.TH.Datatype
                         unliftio-0.2.9.0:UnliftIO.Internals.Async
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
                         vector-instances-3.4:Data.Vector.Instances
                         xml-types-0.3.6:Data.XML.Types yesod-auth-1.6.5:Yesod.Auth
                         yesod-auth-1.6.5:Yesod.Auth.Routes
                         yesod-core-1.6.9:Yesod.Core.Class.Handler
                         yesod-core-1.6.9:Yesod.Core.Internal.LiteApp
                         yesod-core-1.6.9:Yesod.Core.Types yesod-static-1.6.0.1:Yesod.Static
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  aki-site-0.0.0:Application 08851c8d137081baa7904b142ee60e2e
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.IORef 7625124710852387e94dfb3e4df7515e
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.IORef e92b95f2e36bdb5fe155921cbe861044
import  -/  base-4.11.1.0:GHC.MVar 5887537e57bb20af86721190334ddceb
import  -/  base-4.11.1.0:GHC.Word bc9bdf9b61a0f9352e5a1baeee5690a5
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 40b9aff18a55c99eb253f9a43ff9b627
import  -/  foreign-store-0.2:Foreign.Store 0b11500cd0a17cdeb0318c5558c7d32a
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  warp-3.2.25:Network.Wai.Handler.Warp 3f20cf93534d5e3b42bd8389ef786a3d
import  -/  warp-3.2.25:Network.Wai.Handler.Warp.Run 401ebbd88be046703077309f7f2d2ae2
import  -/  warp-3.2.25:Network.Wai.Handler.Warp.Settings 5c2e84187ae5b40ed0ebcfc4d7c410a4
6e85899a145033facf6d5e907114eef1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   DevelMain.$trModule3
                   DevelMain.$trModule1) -}
a504afaf7937d562d7ef512a686a60f4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DevelMain.$trModule2) -}
1e94b0de26bd777d2c9db0334a3e2fa7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DevelMain"#) -}
6cb823fb9778ebcf87b484e36bb19d74
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DevelMain.$trModule4) -}
396f10591baea19dfc50e6c761f42792
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
cf6603fe4b192d2575a21428a03f76d2
  $wmodifyStoredIORef ::
    GHC.Prim.Word#
    -> (a -> GHC.Types.IO a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Word#)
                   (w :: a -> GHC.Types.IO a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                        GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.StablePtr# a #)}
                        @ (GHC.IORef.IORef a)
                        ww
                        w1 of wild { (#,#) ds2 ds3 ->
                 case GHC.Prim.eqAddr#
                        ds3
                          `cast`
                        (UnsafeCo representational (GHC.Prim.StablePtr#
                                                      (GHC.IORef.IORef a)) GHC.Prim.Addr#)
                        __NULL of lwild {
                   DEFAULT
                   -> case GHC.Prim.deRefStablePtr#
                             @ (GHC.IORef.IORef a)
                             ds3
                             ds2 of ds4 { (#,#) ipv ipv1 ->
                      case ipv1
                             `cast`
                           (GHC.IORef.N:IORef[0] <a>_N) of wild1 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ a
                             var#
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case (w ipv3) `cast` (GHC.Types.N:IO[0] <a>_R)
                             ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ a
                             var#
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }
                   1#
                   -> case Foreign.Store.readStore2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {} } }) -}
9762c0c52c3327d8b444250728ab07c5
  modifyStoredIORef ::
    Foreign.Store.Store (GHC.IORef.IORef a)
    -> (a -> GHC.Types.IO a) -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                DevelMain.modifyStoredIORef1
                  `cast`
                (forall (a :: <*>_N).
                 <Foreign.Store.Store (GHC.IORef.IORef a)>_R
                 ->_R <a -> GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8a47b95d75ef47d9782f82ffabcd2679
  modifyStoredIORef1 ::
    Foreign.Store.Store (GHC.IORef.IORef a)
    -> (a -> GHC.Types.IO a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Foreign.Store.Store (GHC.IORef.IORef a))
                   (w1 :: a -> GHC.Types.IO a)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Foreign.Store.N:Store[0]
                           <GHC.IORef.IORef a>_P) of ww { GHC.Word.W32# ww1 ->
                 DevelMain.$wmodifyStoredIORef @ a ww1 w1 w2 }) -}
9cb7b5011c2cbb87a807c320cbd5a248
  shutdown :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                DevelMain.shutdown1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7d550d090f5fa2ffd5dbe8cfeb2dac25
  shutdown1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC foreign-store-0.2 GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Word# #)}
                        1##
                        s of wild { (#,#) ds2 ds3 ->
                 case GHC.Prim.narrow32Word# ds3 of wild1 {
                   DEFAULT -> DevelMain.shutdown3 ds2 DevelMain.shutdown2
                   0##
                   -> DevelMain.shutdown3
                        ds2
                        (GHC.Base.Nothing
                           @ (Foreign.Store.Store
                                (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))) } }) -}
51f70fed81168df89148602656755842
  shutdown2 ::
    GHC.Base.Maybe
      (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
                   DevelMain.tidStoreNum
                     `cast`
                   (Sym (Foreign.Store.N:Store[0]
                             <GHC.IORef.IORef GHC.Conc.Sync.ThreadId>_P))) -}
53ac573f99fdec2c7681e074e5a35968
  shutdown3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Base.Maybe
         (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: GHC.Base.Maybe
                              (Foreign.Store.Store
                                 (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)))[OneShot] ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        DevelMain.shutdown6
                        GHC.Types.True
                        ipv
                   GHC.Base.Just tidStore
                   -> case tidStore
                             `cast`
                           (Foreign.Store.N:Store[0]
                                <GHC.IORef.IORef
                                   GHC.Conc.Sync.ThreadId>_P) of ds { GHC.Word.W32# ds1 ->
                      case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                             GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.StablePtr# a #)}
                             @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                             ds1
                             ipv of wild1 { (#,#) ds2 ds3 ->
                      case GHC.Prim.eqAddr#
                             ds3
                               `cast`
                             (UnsafeCo representational (GHC.Prim.StablePtr#
                                                           (GHC.IORef.IORef
                                                              GHC.Conc.Sync.ThreadId)) GHC.Prim.Addr#)
                             __NULL of lwild {
                        DEFAULT
                        -> case GHC.Prim.deRefStablePtr#
                                  @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                                  ds3
                                  ds2 of ds4 { (#,#) ipv2 ipv3 ->
                           case ipv3
                                  `cast`
                                (GHC.IORef.N:IORef[0] <GHC.Conc.Sync.ThreadId>_N) of wild2 { GHC.STRef.STRef var# ->
                           case GHC.Prim.readMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Conc.Sync.ThreadId
                                  var#
                                  ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                           case ipv5 of wild3 { GHC.Conc.Sync.ThreadId tid1 ->
                           case GHC.Prim.killThread#
                                  @ GHC.Exception.SomeException
                                  tid1
                                  GHC.Conc.Sync.killThread2
                                  ipv4 of s1 { DEFAULT ->
                           GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             DevelMain.shutdown4
                             GHC.Types.True
                             s1 } } } } }
                        1#
                        -> case Foreign.Store.readStore2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } } }) -}
9a6393f7721d3b059f1ecee7abc08134
  shutdown4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# DevelMain.shutdown5) -}
e190fe728f3d328fd79cefaa6c81c2e0
  shutdown5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Yesod app is shutdown"#) -}
7e17dc1a1ae2d1d1d964bfa97ecbb605
  shutdown6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# DevelMain.shutdown7) -}
4f8117559d66d51fac379a7d26205bee
  shutdown7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no Yesod app running"#) -}
0127bb9ab54f05a7a381cd100331fe84
  tidStoreNum :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W32# 1##) -}
fd922789125f28e7297228724ad1bea9
  update :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                DevelMain.update1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d00888792fdbf563ff0125c059c45f31
  update1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC foreign-store-0.2 GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Word# #)}
                        1##
                        s of wild { (#,#) ds2 ds3 ->
                 case GHC.Prim.narrow32Word# ds3 of wild1 {
                   DEFAULT -> DevelMain.update2 ds2 DevelMain.shutdown2
                   0##
                   -> DevelMain.update2
                        ds2
                        (GHC.Base.Nothing
                           @ (Foreign.Store.Store
                                (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))) } }) -}
407457dfc55642ae53b62d3a69cd47cd
  update2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Base.Maybe
         (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: GHC.Base.Maybe
                              (Foreign.Store.Store
                                 (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)))[OneShot] ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Prim.newMVar#
                             @ GHC.Prim.RealWorld
                             @ ()
                             ipv of ds { (#,#) ipv2 ipv3 ->
                      let {
                        ipv4 :: GHC.MVar.MVar () = GHC.MVar.MVar @ () ipv3
                      } in
                      case Foreign.Store.$wwriteStore
                             @ (GHC.MVar.MVar ())
                             0##
                             ipv4
                             ipv2 of ds2 { (#,#) ipv5 ipv6 ->
                      case DevelMain.update3 ipv4 ipv5 of ds1 { (#,#) ipv7 ipv8 ->
                      case GHC.Prim.newMutVar#
                             @ GHC.Conc.Sync.ThreadId
                             @ GHC.Prim.RealWorld
                             ipv8
                             ipv7 of ds4 { (#,#) ipv9 ipv10 ->
                      case Foreign.Store.$wwriteStore
                             @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                             1##
                             (GHC.STRef.STRef
                                @ GHC.Prim.RealWorld
                                @ GHC.Conc.Sync.ThreadId
                                ipv10)
                               `cast`
                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Conc.Sync.ThreadId>_N)
                             ipv9 of ds5 { (#,#) ipv11 ipv12 ->
                      (# ipv11, GHC.Tuple.() #) } } } } }
                   GHC.Base.Just tidStore
                   -> case tidStore
                             `cast`
                           (Foreign.Store.N:Store[0]
                                <GHC.IORef.IORef
                                   GHC.Conc.Sync.ThreadId>_P) of ds { GHC.Word.W32# ds1 ->
                      case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                             GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.StablePtr# a #)}
                             @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                             ds1
                             ipv of wild1 { (#,#) ds2 ds3 ->
                      case GHC.Prim.eqAddr#
                             ds3
                               `cast`
                             (UnsafeCo representational (GHC.Prim.StablePtr#
                                                           (GHC.IORef.IORef
                                                              GHC.Conc.Sync.ThreadId)) GHC.Prim.Addr#)
                             __NULL of lwild {
                        DEFAULT
                        -> case GHC.Prim.deRefStablePtr#
                                  @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                                  ds3
                                  ds2 of ds4 { (#,#) ipv2 ipv3 ->
                           case ipv3
                                  `cast`
                                (GHC.IORef.N:IORef[0] <GHC.Conc.Sync.ThreadId>_N) of wild2 { GHC.STRef.STRef var# ->
                           case GHC.Prim.readMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Conc.Sync.ThreadId
                                  var#
                                  ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                           case ipv5 of wild3 { GHC.Conc.Sync.ThreadId tid1 ->
                           case GHC.Prim.killThread#
                                  @ GHC.Exception.SomeException
                                  tid1
                                  GHC.Conc.Sync.killThread2
                                  ipv4 of s1 { DEFAULT ->
                           case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                                  GHC.Prim.Word#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.StablePtr# a #)}
                                  @ (GHC.MVar.MVar ())
                                  0##
                                  s1 of wild4 { (#,#) ds8 ds9 ->
                           case GHC.Prim.eqAddr#
                                  ds9
                                    `cast`
                                  (UnsafeCo representational (GHC.Prim.StablePtr#
                                                                (GHC.MVar.MVar ())) GHC.Prim.Addr#)
                                  __NULL of lwild1 {
                             DEFAULT
                             -> case GHC.Prim.deRefStablePtr#
                                       @ (GHC.MVar.MVar ())
                                       ds9
                                       ds8 of ds10 { (#,#) ipv6 ipv7 ->
                                case ipv7 of wild5 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.takeMVar#
                                       @ GHC.Prim.RealWorld
                                       @ ()
                                       mvar#
                                       ipv6 of ds11 { (#,#) ipv8 ipv9 ->
                                case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                                       GHC.Prim.Word#
                                                                       -> GHC.Prim.State#
                                                                            GHC.Prim.RealWorld
                                                                       -> (# GHC.Prim.State#
                                                                               GHC.Prim.RealWorld,
                                                                             GHC.Prim.StablePtr#
                                                                               a #)}
                                       @ (GHC.MVar.MVar ())
                                       0##
                                       ipv8 of wild6 { (#,#) ds12 ds13 ->
                                case GHC.Prim.eqAddr#
                                       ds13
                                         `cast`
                                       (UnsafeCo representational (GHC.Prim.StablePtr#
                                                                     (GHC.MVar.MVar
                                                                        ())) GHC.Prim.Addr#)
                                       __NULL of lwild2 {
                                  DEFAULT
                                  -> case GHC.Prim.deRefStablePtr#
                                            @ (GHC.MVar.MVar ())
                                            ds13
                                            ds12 of ds14 { (#,#) ipv10 ipv11 ->
                                     case DevelMain.update3
                                            ipv11
                                            ipv10 of ds15 { (#,#) ipv12 ipv13 ->
                                     case GHC.Prim.writeMutVar#
                                            @ GHC.Prim.RealWorld
                                            @ GHC.Conc.Sync.ThreadId
                                            var#
                                            ipv13
                                            ipv12 of s2# { DEFAULT ->
                                     (# s2#, GHC.Tuple.() #) } } }
                                  1#
                                  -> case Foreign.Store.readStore2
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {} } } } } }
                             1#
                             -> case Foreign.Store.readStore2
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {} } } } } } } }
                        1#
                        -> case Foreign.Store.readStore2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } } }) -}
4e5c645c972528adceaaeda0fb0c0a1e
  update3 ::
    GHC.MVar.MVar ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Conc.Sync.ThreadId #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (done :: GHC.MVar.MVar ())
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Application.getApplicationRepl1 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) port site app ->
                 Control.Concurrent.forkFinally1
                   @ ()
                   (Network.Wai.Handler.Warp.Run.run2
                      (Network.Wai.Handler.Warp.Settings.Settings
                         port
                         Network.Wai.Handler.Warp.Settings.defaultSettings16
                         Network.Wai.Handler.Warp.Settings.defaultOnException1
                           `cast`
                         (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                          ->_R <GHC.Exception.SomeException>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                         Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                         Network.Wai.Handler.Warp.Settings.defaultSettings15
                           `cast`
                         (<Network.Socket.Types.SockAddr>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                         Network.Wai.Handler.Warp.Settings.defaultSettings14
                           `cast`
                         (<Network.Socket.Types.SockAddr>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                         Network.Wai.Handler.Warp.Settings.defaultSettings13
                         (GHC.Base.Nothing @ Network.Wai.Handler.Warp.Timeout.Manager)
                         Network.Wai.Handler.Warp.Settings.defaultSettings12
                         Network.Wai.Handler.Warp.Settings.defaultSettings12
                         Network.Wai.Handler.Warp.Settings.defaultSettings11
                           `cast`
                         (Sym (GHC.Types.N:IO[0] <()>_R))
                         Network.Wai.Handler.Warp.Settings.defaultSettings10
                           `cast`
                         (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                           -> GHC.Types.IO ()>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                         GHC.Types.False
                         Network.Wai.Handler.Warp.Settings.defaultSettings9
                           `cast`
                         (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                         Network.Wai.Handler.Warp.Settings.defaultSettings6
                         Network.Wai.Handler.Warp.Settings.defaultSettings4
                         Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                         Network.Wai.Handler.Warp.Settings.defaultSettings3
                         GHC.Types.True
                         Network.Wai.Handler.Warp.Settings.defaultSettings2
                           `cast`
                         (<Network.Wai.Internal.Request>_R
                          ->_R <Network.HTTP.Types.Status.Status>_R
                          ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                         Network.Wai.Handler.Warp.Settings.defaultSettings1
                           `cast`
                         (<Network.Wai.Internal.Request>_R
                          ->_R <Data.ByteString.Internal.ByteString>_R
                          ->_R <GHC.Integer.Type.Integer>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                         (GHC.Base.Nothing @ GHC.Types.Int))
                      app)
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   (\ (ds :: Data.Either.Either GHC.Exception.SomeException ())
                      (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case done of wild1 { GHC.MVar.MVar mvar# ->
                    case GHC.Prim.putMVar#
                           @ GHC.Prim.RealWorld
                           @ ()
                           mvar#
                           GHC.Tuple.()
                           s1 of s2# { DEFAULT ->
                    (# s2#, GHC.Tuple.() #) } })
                     `cast`
                   (<Data.Either.Either GHC.Exception.SomeException ()>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   ipv } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

